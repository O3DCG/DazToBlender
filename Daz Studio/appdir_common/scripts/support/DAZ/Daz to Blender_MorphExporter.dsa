// DAZ Studio version 4.12.0.86 filetype DAZ Script

(function(){
	
	var s_oFileInfo = new DzFileInfo( getScriptFileName() );
	var s_sToolName = s_oFileInfo.baseName();
	s_oFileInfo.deleteLater();
	
	var s_oMainNode = null;
	var s_sRoot = "";
	var s_sGenName = "";
	
// --- START export_obj_silent ----
	/**********************************************************************
	
		The following is derived from a work published as part of the
		Daz Script Documentation. This portion of the script, and/or any
		portion thereof, may only be used in accordance with the
		following license:
	
		Creative Commons Attribution 3.0 Unported (CC BY 3.0)
		- http://creativecommons.org/licenses/by/3.0
	
	**********************************************************************/
	// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/file_io/export_obj_silent/start
	
	// - Minor changes for this specific use case
	
	function exportOBJ( oNode, sObjName )
	{
		// Get the export manager
		var oExportMgr = App.getExportMgr();
		// Define the class name the for Wavefront Object (*.obj) exporter
		var sClassName = "DzObjExporter";
		// Find the exporter
		var oExporter = oExportMgr.findExporterByClassName( sClassName );
		// If the exporter exists
		if( oExporter ){
			// Create a settings object
			var oSettings = new DzFileIOSettings();
			
			// Define whether or not to show options
			var bShowOptions = false;
			
			// Define whether or not to show options before prompting for a path;
			// requires 4.9.3.22 or later
			var bOptionsBeforeFile = (bShowOptions && App.version64 >= 0x0004000900030016);
			
			// Get the options for the exporter
			if( !oExporter.getOptions( oSettings, bShowOptions && bOptionsBeforeFile, "" ) ){
				// We're done...
				return;
			}
			
			oSettings.setStringValue( "Custom", "Custom" );
			// Set the scale to write the data
			oSettings.setFloatValue( "Scale", 1 );
			// Set the lateral axis to X
			oSettings.setStringValue( "LatAxis", "X" );
			// Set the vertical axis to Y
			oSettings.setStringValue( "VertAxis", "Y" );
			// Set the depth axis to Z
			oSettings.setStringValue( "DepthAxis", "Z" );
			// Do not invert the lateral axis
			oSettings.setBoolValue( "InvertLat", false );
			// Do not invert the vertical axis
			oSettings.setBoolValue( "InvertVert", false );
			// Do not invert the depth axis
			oSettings.setBoolValue( "InvertDepth", false );
			// Do not ignore the geometry of invisible nodes
			oSettings.setBoolValue( "IgnoreInvisible", true );
			// Do not weld seams between parent and child bones on legacy figures - deprecated
			oSettings.setBoolValue( "WeldSeams", false );
			// Do not remove vertices that are floating, connected to nothing - i.e. LOD
			oSettings.setBoolValue( "RemoveUnusedVerts", true );
			// Write vertex textures - UVs
			oSettings.setBoolValue( "WriteVT", false );
			// Do not write vertex normals
			oSettings.setBoolValue( "WriteVN", false );
			// Do not write object statements for each root node - i.e. figures, props
			oSettings.setBoolValue( "WriteO", false );
			
			// Write facet groups
			oSettings.setBoolValue( "WriteG", false );
			// Write facet groups according to whatever the geometry already has
			oSettings.setBoolValue( "GroupGeom", false );
			// Do not write facet groups according to the node it is associated with
			oSettings.setBoolValue( "GroupNodes", false );
			// Do not write facet groups according to surface groups
			oSettings.setBoolValue( "GroupSurfaces", false );
			// Do not write one facet group
			oSettings.setBoolValue( "GroupSingle", false );
			
			// Write surface groups
			oSettings.setBoolValue( "WriteUsemtl", false );
			
			// Do not write a material library
			oSettings.setBoolValue( "WriteMtllib", false );
			
			oSettings.setBoolValue( "OriginalMaps", false );
			// Do not collect texture maps
			oSettings.setBoolValue( "CollectMaps", false );
			// Do not convert texture maps
			oSettings.setBoolValue( "ConvertMaps", false );
			
			// If the version is 4.5.0.114 or newer
			if( App.version64 >= 0x0004000500000072 ){
				// Do not limit export to selection
				oSettings.setBoolValue( "SelectedOnly", false );
				// Do not limit export to the selected roots
				oSettings.setBoolValue( "SelectedRootsOnly", false );
				// Do not limit export to the primary selected root;
				// this setting overrides SelectedRootsOnly
				oSettings.setBoolValue( "PrimaryRootOnly", false );
				// Do not export items that are parented to the selection
				oSettings.setBoolValue( "IncludeParented", false );
				// Do not triangulate n-gons
				oSettings.setBoolValue( "TriangulateNgons", false );
			}
			
			// If the version is 4.9.3.22 or newer
			if( App.version64 >= 0x0004000900030016 ){
				// Do not collapse UVs Tiles
				oSettings.setBoolValue( "CollapseUVTiles", false );
				
				// Show individual settings in the dialog
				oSettings.setBoolValue( "ShowIndividualSettings", false );
			}
			
			// If the version is 4.10.0.73 or newer
			if( App.version64 >= 0x0004000a00000049 ){
				// Set floating point precision; default is 8
				oSettings.setIntValue( "FloatPrecision", 6 );
			}
			
			if( App.version64 >= 0x0004000b0000017f ){
				oSettings.setBoolValue( "WriteF", true );
			}
			
			// Define whether or not to show the options after prompting for a file
			oSettings.setIntValue( "RunSilent", (bShowOptions && !bOptionsBeforeFile ? 0 : 1) );
			
			// If we've got a node, construct the path using the
			// exporter's last path, the node's name, and the
			// exporter's extension...
			// Otherwise, just use the exporter's last path
			var sInitialPath = ( oNode ?
				String( "%1/%2.%3" )
					.arg( oExportMgr.getExportPath() )
					.arg( oNode.name )
					.arg( oExporter.getExtension() ) :
				oExportMgr.getExportPath() );
			
			var sPath = s_sRoot + "/";
			sPath += sObjName + ".obj";
			
			// If the user didn't cancel and the file doesn't already
			// exist, or the user wants to overwrite it
			if( sPath && MainWindow.checkExistingFile( sPath ) ){
				// Write the file using the options specified
				oExporter.writeFile( sPath, oSettings );
			}
			
			// Clean up; don't leak memory
			oExporter.deleteLater();
		// We didn't find an exporter with the class name we wanted
		} else {
			// Inform the user
			MessageBox.critical( qsTr( "An exporter with the class name \"%1\" " +
				"could not be found." ).arg( sClassName ),
				s_sToolName, qsTr( "&OK" ) );
		}
	};
	
// --- END export_obj_silent ----
	
	//Delete previous export
	function prepareForExport( sName )
	{
		var oDir = new DzDir( "" );
		
		var sDir = oDir.homePath() + "/";
		var aSubs = [ "Documents","DTB", sName ];
		for( var i = 0; i < aSubs.length; i += 1 ){
			sDir += aSubs[i] + "/";
			oDir.setPath( sDir );
			if( !oDir.exists() ){
				oDir.mkdir( sDir );
			}
			s_sRoot = sDir;
		}
	};
	
	//Mesh with 1 or more faces
	function is_faced_mesh_single( oNode )
	{
		if( !oNode ){
			return 0;
		}
		
		if( oNode.inherits( "DzBone" ) ){
			return 0;
		}
		
		var oObject = oNode.getObject();
		if( !oObject ){
			return 0;
		}
		
		var oShape = oObject.getCurrentShape();
		if( !oShape ){
			return 0;
		}
		
		var oMesh = oShape.getGeometry();
		if( !oMesh ){
			return 0;
		}
		
		//Mesh with ZERO faces;
		var nFacets = oMesh.getNumFacets();
		if( nFacets < 1 && oMesh.name.toLowerCase().indexOf( "eyebrow" ) < 0 ){
			return -1;
		}
		
		if( nFacets > 13000 ){
			return 3;
		}
		
		if( oNode.isRootNode() ){
			 return 0;
		}
		
		return 1;
	};
	
	//Note: destructive - modifies the scene contents
	function setExportVisibility()
	{
		var oNode;
		var oChild;
		var aChildren;
		
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < aNodes.length; i += 1 ){
			oNode = aNodes[i];
			if( oNode.getNodeParent() == s_oMainNode
			&& !oNode.isRootNode() ){
				print( oNode.name );
				if( oNode.name.indexOf( "Eyelashes" ) > 0 ){
					oNode.setVisible( false );
				} else {
					if( oNode.findNodeChild( 'hip', false ) && isGenital( oNode ) ){
						oNode.setVisible( true );
					} else {
						aChildren = oNode.getNodeChildren( true );
						for( var j = 0; j < aChildren.length; j += 1 ){
							oChild = aChildren[j];
							if( is_faced_mesh_single( oChild ) != 0 ){
								oChild.setVisible( false );
							}
						}
						if( is_faced_mesh_single( oNode ) ){
							oNode.setVisible( false );
						}
					}
				}
			}
		}
	};
	
	//hide if root node is not G8/G3
	function hideNotGenesis38()
	{
		var oNode;
		
		var nIdx = -1;
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < 2; i += 1 ){
			for( var j = 0; j < aNodes.length; j += 1 ){
				oNode = aNodes[j];
				if( oNode.isRootNode() && is_faced_mesh_single( oNode ) > 1 ){
					if( i == 0 &&
						(oNode.name == "Genesis8Female"
						|| oNode.name == "Genesis8Male"
						|| oNode.name == "Genesis3Male"
						|| oNode.name == "Genesis3Female")
					){
						nIdx = j;
						break;
					}
					
					if( i > 0 ){
						if( nIdx > -1 && j != nIdx ){
							oNode.setVisible( false );
						}
					}
				}
			}
		}
		
		if( nIdx > -1 && nIdx < aNodes.length ){
			return aNodes[nIdx];
		} else {
			return null;
		}
	};
	
	//Make sure node is Genital
	function isGenital( oNode )
	{
		var aKeys = [ "genital", "malegen_" ];
		if( is_faced_mesh_single( oNode ) < 1 ){
			return false;
		}
		
		var sName = oNode.name.toLowerCase();
		for( var i = 0; i < aKeys.length; i += 1 ){
			if( sName.length == 2 && sName == aKeys[i]
			|| sName.length > 2 && sName.indexOf( aKeys[i] ) >= 0 ){
				if( oNode.findNodeChild( 'hip', false ) ){
					s_sGenName = oNode.name;
					return true;
				}
			}
		}
		
		return false;
	};
	
	//set Subdivision Level
	// TODO : inconsistent with Daz to Blender.dsa - why?
	function setSubDivLevelAll( nLevel )
	{
		var bIsBody;
		var bIsGen;
		var nLev; // TODO : not used.
		var oNode;
		
		var aNodes = Scene.getNodeList();
		for( var i = 0; i < aNodes.length; i += 1 ){
			oNode = aNodes[i];
			bIsBody = oNode == s_oMainNode;
			bIsGen = !bIsBody && isGenital( oNode );
			nLev = 0;
			if( bIsBody || bIsGen ){
				nLev = nLevel;
			}
			
			setSubDivLevel( oNode, nLevel );
		}
	};
	
	function setSubDivLevel( oNode, nLevel )
	{
		var aProps = [ "lodlevel", "SubDIALevel" ];
		var oObject = oNode.getObject();
		if( !oObject ){
			return;
		}
		
		var oShape = oObject.getCurrentShape();
		if( !oShape ){
			return;
		}
		
		var oProp;
		for( var i = 0; i < aProps.length; i += 1 ){
			oProp = oShape.findProperty( aProps[i] );
			if( oProp ){
				if( oProp.isLocked() ){
					oProp.lock( false );
				}
				
				if( i == 0 && nLevel == 0 ){
					oProp.setValue( "Basic" );
				} else {
					oProp.setValue( nLevel );
				}
				
				if( nLevel > 0 ){
					oProp.lock( true );
				}
			}
		}
	};
	
	//Decide subdivison level Dialog.
	function promptMeshResolution()
	{
		var nLevel = -1;
		
		var wDlg = new DzDialog;
		wDlg.caption = "Select Subdiv Level";
		
		var wLyt = new DzVBoxLayout( wDlg );
		wLyt.autoAdd = true;
		
		var wOptBG = new DzVButtonGroup( wDlg );
		wOptBG.columns = 1;
		
		var aRBtns = new Array( 2 );
		for( var i = 0;i <= 2; i += 1 ){
			aRBtns[i] = new DzRadioButton( wOptBG );
			aRBtns[i].text = "SubDiv " + String( i );
			if( i == 0 ){
				aRBtns[i].checked = true;
			}
		}
		
		var wBtnGrp = new DzVButtonGroup( wDlg );
		wBtnGrp.columns = 2;
		
		var wOkBtn = new DzPushButton( wBtnGrp );
		wOkBtn.text = "Accept";
		
		var wNoBtn = new DzPushButton( wBtnGrp );
		wNoBtn.text = "Cancel";
		
		wDlg.setAcceptButton( wOkBtn );
		wDlg.setRejectButton( wNoBtn );
		
		if( wDlg.exec() ){
			for( var i = 0; i <= 3; i += 1 ){
				if( aRBtns[i].checked ){
					nLevel = i;
					break;
				}
			}
		}
		
		return nLevel;
	};
	
	
	s_sGenName = "";
	s_oMainNode = hideNotGenesis38();
	if( s_oMainNode ){
		print( s_oMainNode.name );
	} else {
		MessageBox.information(
			qsTr( "There is no Genesis 3/8 figure." ),
			s_sToolName, qsTr( "&OK" ) );
		return;
	}
	
	var nLevel = promptMeshResolution();
	if( nLevel < 0 ){
		return;
	}
	
	setSubDivLevelAll( nLevel );
	setExportVisibility();
	
	prepareForExport( "to_blender_morph" );
	
	var dateNow = new Date();
	
	if( s_sGenName.isEmpty() ){
		s_sGenName = s_oMainNode.name;
	} else {
		var nIdx = s_sGenName.indexOf( "_" );
		if( nIdx > -1 ){
			s_sGenName = s_sGenName.substring( 0, nIdx );
		}
	}
	s_sGenName += "_" + nLevel;
	s_sGenName += "_" + dateNow.getFullYear();
	s_sGenName += "-" + (dateNow.getMonth() + 1);
	s_sGenName += "-" + dateNow.getDate();
	s_sGenName += "_" + dateNow.getHours();
	s_sGenName += "" + dateNow.getMinutes();
	s_sGenName += "" + dateNow.getSeconds();
	
	exportOBJ( s_oMainNode, s_sGenName );
	
})();
